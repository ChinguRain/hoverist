<template>
  <v-app>
    <v-container v-resize="handleResize" fluid>
      <v-list dense>
        <div
          v-for="(item, index) in items"
          :key="item.text"
          class="zoom-item"
          @mouseenter="handleMouseEnter(index)"
          @mouseleave="handleMouseLeave"
        >
          <v-list-item-content>
            <v-list-item-title>{{ item.text }}</v-list-item-title>
          </v-list-item-content>
          <div v-if="currentZoomedIndex === index" class="zoomed-item">
            <v-list-item-content>
              <v-list-item-title>{{ item.text }}</v-list-item-title>
            </v-list-item-content>
          </div>
        </div>
      </v-list>
    </v-container>
  </v-app>
</template>

<script>
  export default {
    data() {
      return {
        items: Array.from({ length: 14 }, (_, i) => ({
          text: `Item ${i + 1}${i > 0 ? 'e'.repeat(i * 2) : ''}`,
        })),
        currentZoomedIndex: -1,
        isAnimating: true,
        animationTimeout: null,
        pauseTimeout: null,
      }
    },
    methods: {
      clearAllTimeouts() {
        clearTimeout(this.animationTimeout)
        clearTimeout(this.pauseTimeout)
      },
      getTransform(index) {
        if (this.currentZoomedIndex === index) {
          return 'scale(1.2)'
        } else {
          return 'scale(1)'
        }
      },
      animateItem(index) {
        if (!this.isAnimating) return

        this.currentZoomedIndex = index

        this.animationTimeout = setTimeout(() => {
          this.currentZoomedIndex = -1
          const nextIndex = (index + 1) % this.items.length
          let pauseDuration

          if (nextIndex % 7 === 0) {
            pauseDuration = 7000
          } else {
            pauseDuration = 500
          }

          this.pauseTimeout = setTimeout(() => {
            this.animateItem(nextIndex)
          }, pauseDuration)
        }, 500)
      },
      handleResize() {
        this.isAnimating = false
        this.clearAllTimeouts()
        this.currentZoomedIndex = -1

        this.animationTimeout = setTimeout(() => {
          this.isAnimating = true
          if (window.innerWidth < 768) {
            this.animateItem(0)
          }
        }, 200)
      },
      handleMouseEnter(index) {
        if (window.innerWidth < 768) {
          this.isAnimating = false
          this.clearAllTimeouts()
          this.currentZoomedIndex = index
        }
      },
      handleMouseLeave() {
        if (window.innerWidth < 768) {
          this.isAnimating = true
          this.clearAllTimeouts()
          const nextIndex = (this.currentZoomedIndex + 1) % this.items.length
          this.animateItem(nextIndex)
        }
      },
    },
    mounted() {
      window.addEventListener('resize', this.handleResize)
      this.handleResize()
      if (window.innerWidth < 768) this.animateItem(0)
    },
    beforeUnmount() {
      window.removeEventListener('resize', this.handleResize)
      this.clearAllTimeouts()
    },
  }
</script>

<style>
  .v-container {
    padding: 70px;
  }

  .v-list {
    background-color: #f0f0f0;
    padding: 30px;
    height: 42.5rem;
  }

  .zoom-item {
    background-color: #ffffff;
    padding: 5px;
    margin: 6px 0;
    border: 1px solid #ccc;
    border-radius: 4px;
    transition: transform 0.5s ease;
    width: 100%;
    position: relative;
  }

  .zoom-item .v-list-item-title {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .zoomed-item .v-list-item-title {
    white-space: normal;
    overflow: visible;
    text-overflow: clip;
  }

  .zoomed-item {
    background-color: #d1e7dd;
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 4px;
    transform: scale(1.2);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 100;
  }
</style>
