<template>
  <v-app>
    <v-container v-resize="handleResize" fluid>
      <v-list dense>
        <div
          v-for="(item, index) in items"
          :key="item.text"
          :style="{ transform: getTransform(index) }"
          :class="{ 'zoomed-item': currentZoomedIndex === index }"
          class="zoom-item"
          @mouseenter="handleMouseEnter(index)"
          @mouseleave="handleMouseLeave"
        >
          <v-list-item-content>
            <v-list-item-title>{{ item.text }}</v-list-item-title>
          </v-list-item-content>
        </div>
      </v-list>
    </v-container>
  </v-app>
</template>

<script>
  export default {
    data() {
      return {
        items: [
          { text: 'Iteeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeem 1' },
          { text: 'Iteeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeem 2' },
          { text: 'Item 3' },
          { text: 'Item 4' },
          { text: 'Item 5' },
          { text: 'Item 6' },
          { text: 'Item 7' },
          { text: 'Item 8' },
          { text: 'Item 9' },
          { text: 'Item 10' },
          { text: 'Item 11' },
          { text: 'Item 12' },
          { text: 'Item 13' },
          { text: 'Item 14' },
        ],
        currentZoomedIndex: -1,
        isAnimating: true,
        animationTimeout: null,
        pauseTimeout: null,
      }
    },
    methods: {
      getTransform(index) {
        return this.currentZoomedIndex === index ? 'scale(1.2)' : 'scale(1)'
      },
      animateItem(index) {
        if (!this.isAnimating) return

        this.currentZoomedIndex = index

        this.animationTimeout = setTimeout(() => {
          this.currentZoomedIndex = -1

          // Move to the next item
          const nextIndex = (index + 1) % this.items.length

          // Set pause duration based on the index
          const pauseDuration = nextIndex % 7 === 0 ? 7000 : 500

          this.pauseTimeout = setTimeout(() => {
            this.animateItem(nextIndex)
          }, pauseDuration)
        }, 500)
      },
      handleResize() {
        this.isAnimating = false // Pause animations
        clearTimeout(this.animationTimeout)
        clearTimeout(this.pauseTimeout)
        this.currentZoomedIndex = -1 // Reset zoom index

        // Debounce the resume animation
        this.animationTimeout = setTimeout(() => {
          this.isAnimating = true // Resume animations
          if (window.innerWidth < 768) {
            this.animateItem(0) // Start animation if in mobile view
          }
        }, 200) // Adjust the timeout as needed
      },
      handleMouseEnter(index) {
        if (window.innerWidth >= 768) return // Disable hover on wide screens
        this.isAnimating = false // Pause animations
        clearTimeout(this.animationTimeout)
        clearTimeout(this.pauseTimeout)
        this.currentZoomedIndex = index // Zoom in on hover
      },
      handleMouseLeave() {
        if (window.innerWidth >= 768) return // Disable hover on wide screens
        this.isAnimating = true // Resume animations
        clearTimeout(this.animationTimeout)
        clearTimeout(this.pauseTimeout)
        const nextIndex = (this.currentZoomedIndex + 1) % this.items.length
        this.animateItem(nextIndex) // Continue animation
      },
    },
    mounted() {
      window.addEventListener('resize', this.handleResize)
      this.handleResize() // Call it initially to set the state based on the current window size
      if (window.innerWidth < 768) this.animateItem(0)
    },
    beforeUnmount() {
      window.removeEventListener('resize', this.handleResize)
      clearTimeout(this.animationTimeout)
      clearTimeout(this.pauseTimeout)
    },
  }
</script>

<style>
  .v-container {
    padding: 70px;
  }

  .v-list {
    background-color: #f0f0f0;
    padding: 30px;
  }

  .zoom-item {
    background-color: #ffffff;
    padding: 5px;
    margin: 6px 0;
    border: 1px solid #ccc;
    border-radius: 4px;
    transition: transform 0.5s ease;
    width: 100%;
  }

  .zoom-item .v-list-item-title {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .zoomed-item .v-list-item-title {
    white-space: normal;
    overflow: visible;
    text-overflow: clip;
  }

  .zoomed-item {
    background-color: #d1e7dd;
  }
</style>
