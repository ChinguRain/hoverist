import { shallowMount } from '@vue/test-utils';
import YourComponent from '@/path/to/YourComponent.vue'; // Adjust the import path accordingly

describe('YourComponent.vue', () => {
  it('renders the correct number of items', () => {
    const wrapper = shallowMount(YourComponent);
    const items = wrapper.vm.items;
    expect(wrapper.findAll('.zoom-item')).toHaveLength(items.length);
    wrapper.unmount();
  });

  it('zooms in on mouse enter', async () => {
    const wrapper = shallowMount(YourComponent);
    const firstItem = wrapper.find('.zoom-item');
    await firstItem.trigger('mouseenter');
    expect(wrapper.vm.currentZoomedIndex).toBe(0);
    wrapper.unmount();
  });

  it('zooms out on mouse leave', async () => {
    const wrapper = shallowMount(YourComponent);
    const firstItem = wrapper.find('.zoom-item');
    await firstItem.trigger('mouseenter');
    await firstItem.trigger('mouseleave');
    expect(wrapper.vm.currentZoomedIndex).toBe(1); // Assuming the next index is 1
    wrapper.unmount();
  });

  it('handles window resize', async () => {
    const wrapper = shallowMount(YourComponent);
    window.innerWidth = 500; // Simulate a mobile width
    window.dispatchEvent(new Event('resize'));
    await wrapper.vm.$nextTick();
    expect(wrapper.vm.isAnimating).toBe(false);
    expect(wrapper.vm.currentZoomedIndex).toBe(-1);
    wrapper.unmount();
  });

  it('starts animation on mount if width is less than 768', async () => {
    const wrapper = shallowMount(YourComponent);
    window.innerWidth = 500; // Simulate a mobile width
    window.dispatchEvent(new Event('resize'));
    await wrapper.vm.$nextTick();
    expect(wrapper.vm.isAnimating).toBe(true);
    expect(wrapper.vm.currentZoomedIndex).toBe(0); // Should start with the first item
    wrapper.unmount();
  });

  it('clears timeouts on unmount', () => {
    const clearTimeoutSpy = jest.spyOn(window, 'clearTimeout');
    const wrapper = shallowMount(YourComponent);
    wrapper.unmount();
    expect(clearTimeoutSpy).toHaveBeenCalled();
  });
});








/////////////////////////////////////////

import { shallowMount } from '@vue/test-utils';
import YourComponent from '@/path/to/YourComponent.vue'; // Adjust the import path accordingly

describe('YourComponent.vue', () => {
  it('renders the correct number of items', () => {
    const wrapper = shallowMount(YourComponent);
    const items = wrapper.vm.items;
    expect(wrapper.findAll('.zoom-item')).toHaveLength(items.length);
  });

  it('zooms in on mouse enter', async () => {
    const wrapper = shallowMount(YourComponent);
    const firstItem = wrapper.find('.zoom-item');
    
    await firstItem.trigger('mouseenter');
    
    expect(wrapper.vm.currentZoomedIndex).toBe(0);
  });

  it('zooms out on mouse leave', async () => {
    const wrapper = shallowMount(YourComponent);
    const firstItem = wrapper.find('.zoom-item');
    
    await firstItem.trigger('mouseenter');
    await firstItem.trigger('mouseleave');
    
    expect(wrapper.vm.currentZoomedIndex).toBe(1); // Assuming the next index is 1
  });

  it('handles window resize correctly', async () => {
    const wrapper = shallowMount(YourComponent);
    
    // Simulate a resize event
    window.innerWidth = 500; // Simulate mobile width
    window.dispatchEvent(new Event('resize'));
    
    expect(wrapper.vm.isAnimating).toBe(false);
    expect(wrapper.vm.currentZoomedIndex).toBe(-1);
    
    // Simulate a resize back to larger width
    window.innerWidth = 800;
    window.dispatchEvent(new Event('resize'));
    
    expect(wrapper.vm.isAnimating).toBe(true);
  });

  it('animates items correctly', async () => {
    jest.useFakeTimers();
    const wrapper = shallowMount(YourComponent);
    
    // Start animation
    wrapper.vm.animateItem(0);
    
    expect(wrapper.vm.currentZoomedIndex).toBe(0);
    
    jest.advanceTimersByTime(500); // Wait for the first timeout
    expect(wrapper.vm.currentZoomedIndex).toBe(-1); // Should reset to -1
    
    jest.advanceTimersByTime(500); // Wait for the next animation
    expect(wrapper.vm.currentZoomedIndex).toBe(1); // Should animate to the next item
  });

  it('clears timeouts on resize', async () => {
    const wrapper = shallowMount(YourComponent);
    wrapper.vm.animationTimeout = setTimeout(() => {}, 1000);
    wrapper.vm.pauseTimeout = setTimeout(() => {}, 1000);
    
    wrapper.vm.clearAllTimeouts();
    
    expect(clearTimeout).toHaveBeenCalledTimes(2);
  });
});


///////////////////////////////////////////////////////////
import { shallowMount } from '@vue/test-utils';
import YourComponent from '@/path/to/YourComponent.vue'; // Adjust the import path accordingly

describe('YourComponent.vue', () => {
  it('renders the correct number of items', () => {
    const wrapper = shallowMount(YourComponent);
    const items = wrapper.vm.items;
    expect(wrapper.findAll('.zoom-item')).toHaveLength(items.length);
  });

  it('zooms in on mouse enter', async () => {
    const wrapper = shallowMount(YourComponent);
    const firstItem = wrapper.find('.zoom-item');
    
    await firstItem.trigger('mouseenter');
    
    expect(wrapper.vm.currentZoomedIndex).toBe(0);
  });

  it('zooms out on mouse leave', async () => {
    const wrapper = shallowMount(YourComponent);
    const firstItem = wrapper.find('.zoom-item');
    
    await firstItem.trigger('mouseenter');
    await firstItem.trigger('mouseleave');
    
    expect(wrapper.vm.currentZoomedIndex).toBe(1); // Assuming the next index is 1
  });

  it('handles window resize correctly', async () => {
    const wrapper = shallowMount(YourComponent);
    
    // Simulate a resize event
    window.innerWidth = 500; // Simulate mobile width
    window.dispatchEvent(new Event('resize'));
    
    expect(wrapper.vm.isAnimating).toBe(false);
    expect(wrapper.vm.currentZoomedIndex).toBe(-1);
    
    // Simulate a resize back to larger width
    window.innerWidth = 800;
    window.dispatchEvent(new Event('resize'));
    
    expect(wrapper.vm.isAnimating).toBe(true);
  });

  it('animates items correctly', async () => {
    jest.useFakeTimers();
    const wrapper = shallowMount(YourComponent);
    
    // Start animation
    wrapper.vm.animateItem(0);
    
    expect(wrapper.vm.currentZoomedIndex).toBe(0);
    
    jest.advanceTimersByTime(500); // Wait for the first timeout
    expect(wrapper.vm.currentZoomedIndex).toBe(-1); // Should reset to -1
    
    jest.advanceTimersByTime(500); // Wait for the next animation
    expect(wrapper.vm.currentZoomedIndex).toBe(1); // Should animate to the next item
  });

  it('clears timeouts on resize', () => {
    jest.spyOn(global, 'clearTimeout'); // Mock clearTimeout
    const wrapper = shallowMount(YourComponent);
    wrapper.vm.animationTimeout = setTimeout(() => {}, 1000);
    wrapper.vm.pauseTimeout = setTimeout(() => {}, 1000);
    
    wrapper.vm.clearAllTimeouts();
    
    expect(clearTimeout).toHaveBeenCalledTimes(2);
  });
});
